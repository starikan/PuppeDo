---
name: main
description: Main test
data:
  mainTestData: foo
dataExt:
  - dataExtMain

beforeRun:
  - runnerSwitch:
      bindData: { runnerName: myEnv }

# afterTest:
#   - runnerClose:
#       bindData: { runnerName: myEnv }

run:
  - initData:
      const:
        directValue: direct
        bindedValue: myEnv

  - case:
      description: Colored Case atom
      run:
        - goTo:
            bindDescription: "'Going on page ' + url"
            bD: { url: baseUrl }

        - checkSelector:
            bindSelectors: { selector: nested.mainInput }
            errorIfResult: 'exists === false'
            logOptions:
              screenshot: true

  - blank:
      description: Input some text in field INPUT
      bS: { selector: mainInput }
      data: { text: myDataBinded }
      needSelector: ['selector']
      needData: ['text']
      allowOptions: ['noClearInput']
      inlineJS: >
        const { selector } = this.selectors;
        const { text } = this.data;
        const { noClearInput } = this.options;

        const element = await this.getElement(selector);

        const logEntry = `Type in selector: '${selector}', text: '${text}'`;

        if (!element) {
          await this.log({ text: logEntry, element, level: 'error' });
          throw { message: logEntry };
        }

        if (this.getEngine('playwright')) {
          await this.page.evaluate(
            ({ element, text, noClearInput }) => {
                if (noClearInput) {
                  element.value = element.value + String(text);
                }
                else {
                  element.value = String(text);
                }
            },
            { element, text, noClearInput },
          );
        } else if (this.getEngine('puppeteer')) {
          await this.page.evaluate(
            (element, text, noClearInput) => {
                if (noClearInput) {
                  element.value = element.value + String(text);
                }
                else {
                  element.value = String(text);
                }
            },
            element, text, noClearInput
          );
        } else {
          throw new Error(`There is unknown engine ${this.getEngine()}`);
        }

        await this.log({ text: logEntry, element });

        await element.dispose();

  - blank:
      bindDescription: "'Nested click ' + nested.mainInput"
      logOptions:
        textColor: black
        backgroundColor: white
      run:
        - clickSelector:
            bS: { selector: nested.mainInput }

  - blank:
      description: I am not showing in log
      logOptions:
        logThis: false

  - blank:
      description: Set result with colors
      logOptions:
        textColor: colorUnknown
        backgroundColor: colorUnknown
      result: { $i: 0 }

  - typeInput:
      bS: { selector: mainInput }
      data: { text: '' }

  - typeInput:
      bS: { selector: mainInput }
      bD: { text: $i }
      options: { noClearInput: true }
      result: { $i: $i + 1 }
      repeat: 2

  - typeInput:
      bS: { selector: mainInput }
      bD: { text: $i }
      disable: true

  - getText:
      bS: { selector: mainInput }
      r: { result: text }
      errorIfResult: "result !== '01'"

  - clickWithNestedWait:
      bS: { mainInputInside: mainInput }
      # debug: true
      o:
        hidden: false
        visible: true
        timeDelay: 0
        count: 1
        delay: 0
        button: left
        logAfter: false

  - waitTime:
      description: Checking If statement
      d: { time: 2000 }
      if: '1 !== 1'
      errorIf: '1 === 1'
      errorIfResult: '1 === 1'

  - getText:
      description: Get text with repeat
      s: { selector: title }
      r: { titleText: text }
      repeat: 3

  - blank:
      description: Some data function
      let: { myDataFunction: '"text".replace("text", "Title of HTML: ") + titleText' }

  - blank:
      description: Bind data from function
      const: { myDataBinded: myDataFunction }

  - typeInput:
      description: Input some text in field INPUT
      bS: { selector: mainInput }
      ðŸ”‘ðŸ“‹: { text: myDataBinded }
      logOptions:
        screenshot: true
        fullpage: true

  # - cdpGetSelector:

  - todo:
      description: Make awesome test

  - subTest:
      description: Ignor this inlineJS. Because subTest have run section
      allowResults: ['x']
      inlineJS: >
        const x = 1 + 1;
        return { x };

  - blank:
      allowResults: ['x']
      inlineJS: >
        const x = 1 + 1;
        return { x };
      errorIfResult: x !== 2

  - blank:
